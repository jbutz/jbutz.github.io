<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
   
   <title>JasonButz.info - Blog</title>
   
   <link>http://www.jasonbutz.info</link>
   <description/>
   <language>en-us</language>
   <atom:link href="http://www.jasonbutz.info/blog/atom.xml" rel="self" type="application/rss+xml" />
   
   
   <item>
    <title>ServiceNow - Passing Data</title>
    <link>http://www.jasonbutz.info/blog/2013/10/25/service-now-passing-data.html</link>
    <dc:creator  xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Butz</dc:creator>
    <pubDate>Fri, 25 Oct 2013 10:00:00 -0400</pubDate>
    <guid>http://www.jasonbutz.info/blog/2013/10/25/service-now-passing-data.html</guid>
    <description><![CDATA[
     <p>At work we came across an interesting issue when dealing with ServiceNow this week. We are working on implimenting Incident and needed to be able to create a change or a request from the incident. The new record needed to have its <code>parent</code> field set to reference the inicident. Some of the original code does this for requests by redirecting the user to the Service Catalog and setting a parameter in the URL that is meant to will in a field on the form. Unfortunatly that doesn&#8217;t work in our case. Our changes are generated by using a wizard, and our requests are done with a record producer. We figured out a way to work around the issue and pass the values to the wizard and record producer. I thought it was something people might like to see.</p>

<p>Here is what the <em>Create Request</em> UI action looks like:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Update saves incidents before going to the catalog homepage</span>
<span class='nx'>current</span><span class='p'>.</span><span class='nx'>update</span><span class='p'>();</span>
<span class='c1'>// Build the URL</span>
<span class='kd'>var</span> <span class='nx'>url</span> <span class='o'>=</span> <span class='s2'>&quot;com.glideapp.servicecatalog_cat_item_view.do?sysparm_id=abcdef0123456789&amp;incident_sysid=&quot;</span><span class='p'>;</span>
<span class='nx'>url</span> <span class='o'>+=</span> <span class='nx'>current</span><span class='p'>.</span><span class='nx'>sys_id</span><span class='p'>;</span>
<span class='c1'>// Redirect the user</span>
<span class='nx'>action</span><span class='p'>.</span><span class='nx'>setRedirectURL</span><span class='p'>(</span><span class='nx'>url</span><span class='p'>);</span>
</code></pre></div>
<p>What I am doing here is setting the URL for the record producer. Then I am adding a custom parameter on the end, <code>incident_sysid</code>, and setting it to the incident&#8217;s <code>sys_id</code>. You can do the same thing for a wizard. Then on the first panel of the wizard, or on the record producer, you need to add a field to put the value into. I added the field and then used a UI Policy to hide the field. Then I created an onLoad Client Script that takes the parameter from the URL and fills in the form field. Here is the client script I am using with both the wizard and record producer.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>onLoad</span><span class='p'>()</span>
<span class='p'>{</span>
   <span class='kd'>var</span> <span class='nx'>url</span> <span class='o'>=</span> <span class='nb'>window</span><span class='p'>.</span><span class='nx'>location</span><span class='p'>.</span><span class='nx'>href</span><span class='p'>;</span>
   <span class='kd'>var</span> <span class='nx'>match</span> <span class='o'>=</span> <span class='nx'>url</span><span class='p'>.</span><span class='nx'>match</span><span class='p'>(</span><span class='sr'>/&amp;incident_sysid=([a-zA-Z0-9]+)/</span><span class='p'>);</span>
   <span class='kd'>var</span> <span class='nx'>sysid</span> <span class='o'>=</span> <span class='nx'>match</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>];</span>
   <span class='nx'>g_form</span><span class='p'>.</span><span class='nx'>setValue</span><span class='p'>(</span><span class='s1'>&#39;parent&#39;</span><span class='p'>,</span> <span class='nx'>sysid</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre></div>
<p>The script runs a regular expression against the current URL to pull out the <code>sys_id</code> and set it to the value of the field. Keep in mind that if you are using a wizard you will need to update the record producer at the end to set the value on the new record. If you are using just a record producer you can name the field the same thing in both the producer and the dictionary and it will automatically copy over.</p>
     ]]></description>
   </item>
   
   <item>
    <title>I Got Mentioned</title>
    <link>http://www.jasonbutz.info/blog/2013/09/10/i-got-mentioned.html</link>
    <dc:creator  xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Butz</dc:creator>
    <pubDate>Tue, 10 Sep 2013 16:00:00 -0400</pubDate>
    <guid>http://www.jasonbutz.info/blog/2013/09/10/i-got-mentioned.html</guid>
    <description><![CDATA[
     <p>Last week a newletter went out that I had never heard of. It is called &#8220;Hacks &amp;&amp; Happenings&#8221; and it is put out by a group called <a href='http://indyhackers.org/'>Indy Hackers</a>. In their <a href='http://us6.campaign-archive1.com/?u=244b5370d41b5cf4146ec517c&amp;id=c5483caef3'>September 2013 Issue</a> my <a href='http://www.jasonbutz.info/project/personal/timetracker.html'>Time Track</a> project was mentioned! I didn&#8217;t even know about it until my boss forwarded me the newsletter.</p>

<p>Needless to say, I am now following the newletter and keeping an eye on the Indy Hackers website for any meetups I want to take part in. Thank you Indy Hackers.</p>
     ]]></description>
   </item>
   
   <item>
    <title>Importance vs. Urgency</title>
    <link>http://www.jasonbutz.info/blog/2013/08/23/importance-urgency.html</link>
    <dc:creator  xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Butz</dc:creator>
    <pubDate>Fri, 23 Aug 2013 11:00:00 -0400</pubDate>
    <guid>http://www.jasonbutz.info/blog/2013/08/23/importance-urgency.html</guid>
    <description><![CDATA[
     <p>A little while back my boss introduced me to the Importance vs. Urgency Matrix. It was a nice concept and I saw the reasoning behind it, but I didn&#8217;t pay it much heed. More recently I have started using it a great deal. I have two white boards in my office. One I keep blank for use as needed. The other one has a list of the primary things that are on my radar listed, with a color coded letter next to them. Then at the top I have a matrix similar to the one below and each letter is placed in a quadrant. That is how I keep track of the major things I have to do, and which I should pay the most attention to. Let me explain the matrix.</p>

<p>Along one axis is the importance, along the other is urgency. Things that are important and urgent fall into the quadrant I labeled &#8220;1&#8221;. Things that are important, but not urgent fall into the quadrant labeled &#8220;2&#8221;. Things that are urgent but not important fall into quadrant &#8220;3&#8221;. I think you can figure out quadrant &#8220;4&#8221;. I only break things down into the four quadrants and then let them vie for priority amongst themselves. You can use the whole setup and have things broken down every more finely.</p>
<p><a class='th radius' href='http://www.jasonbutz.info/assets/img/posts/importance-urgency-00.png' style='display: inline-block;'>
	<img alt='Importance vs. Urgency Matrix' src='http://www.jasonbutz.info/assets/img/posts/importance-urgency-00.png' />
</a></p>
<p>I work on things based on the order of the quadrant they fall in. If something is in quadrant 1 that is where I will try and focus most of my time. I work on things from quadrant 2 and people bring them up and progress is needed. If something falls in quadrant 3 I will work on it a little bit as people as. I treat it like quadrant 2, but with less priority. If something is in quadrant 4 then I will more or less ignore it until it moves somewhere else.</p>

<p>Let me go into the reasoning behind this ordering. If something is both important and urgent then it makes sense to work on that first, right? I think that is fairly apparent, so I won&#8217;t spend much time on that. The next bit could be taken differently by different people. I put important but not urgent things ahead of urgent but not important things. My reasoning on that is people freak out over small things. If someone is freaking out over an e-mail not arriving in a timely manner then you could say that is considered an urgent issue, they certainly think so. But is it really that important? Most of the time it&#8217;s not. You have to try and be unbiased when judging these things. If a problem or project is especially dear to someone then they will consider it more important, but you have to look at the bigger picture to decide. If something isn&#8217;t important and isn&#8217;t urgent then you will probably waste your time if you focus on it. In my experience things in this category will gain some urgency every once in a while and then drop back down to not being urgent.</p>

<p>Here is an example of what my whiteboard looks like, except my list goes all the way up to N. I don&#8217;t have it written anywhere what the different colors mean so that people don&#8217;t know, but the red items are ones I should focus on as much as possible. Green means to focus on every once in a while so I can show progress. Blue means ignore it until someone else brings it up. I&#8217;m planning to get some painters tape and use that to make better lines on my board since they are hand drawn right now. I&#8217;ll probably post an update to this with a picture once I have that done.</p>
<p><a class='th radius' href='http://www.jasonbutz.info/assets/img/posts/importance-urgency-01.png' style='display: inline-block;'>
	<img alt='Importance vs. Urgency Whiteboard' src='http://www.jasonbutz.info/assets/img/posts/importance-urgency-01.png' />
</a></p>
     ]]></description>
   </item>
   
   <item>
    <title>Etsy Deployinator Environments</title>
    <link>http://www.jasonbutz.info/blog/2013/07/31/etsy-deployinator-environments.html</link>
    <dc:creator  xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Butz</dc:creator>
    <pubDate>Wed, 31 Jul 2013 11:00:00 -0400</pubDate>
    <guid>http://www.jasonbutz.info/blog/2013/07/31/etsy-deployinator-environments.html</guid>
    <description><![CDATA[
     <p>Etsy open-sourced their deployment tool a while back, but I didn&#8217;t learn about it until more recently. It is called <a href='https://github.com/etsy/deployinator'>Deployinator</a> and runs on Ruby. I&#8217;m looking at using it for a project at work, but I ran into a horrible lack of documentation. The one example that is in the repo isn&#8217;t bad, it just doesn&#8217;t show you how to have multiple deploy buttons. In the case I may use it in, I will need multiple. If you aren&#8217;t sure what I mean by &#8220;multiple deploy buttons&#8221; check out the picture on <a href='http://codeascraft.com/2010/05/20/quantum-of-deployment/'>this page</a>.</p>

<p>After digging through the code I finally got that working and I think others might want to avoid digging through the code.</p>

<p>If you don&#8217;t configure the buttons, called environments, then you get one &#8220;Deploy production&#8221; button, like you see below.</p>
<p><a class='th radius' href='http://www.jasonbutz.info/assets/img/posts/etsy-deployinator-00.png' style='display: inline-block;'>
	<img alt='Deployinator default enviroment' src='http://www.jasonbutz.info/assets/img/posts/etsy-deployinator-00.png' />
</a></p>
<p>Below is what you get for the demo stack. Only a few of the methods are actually required for the default setup. The required methods for the default setup are <code>demo_production</code>, <code>demo_production_version</code>, and <code>demo_head_build</code>.</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>module</span> <span class='nn'>Deployinator</span>
  <span class='k'>module</span> <span class='nn'>Stacks</span>
    <span class='k'>module</span> <span class='nn'>Demo</span>
      <span class='k'>def</span> <span class='nf'>demo_git_repo_url</span>
        <span class='s2'>&quot;git://github.com/etsy/statsd.git&quot;</span>
      <span class='k'>end</span>

      <span class='k'>def</span> <span class='nf'>demo_git_checkout_path</span>
        <span class='s2'>&quot;</span><span class='si'>#{</span><span class='n'>checkout_root</span><span class='si'>}</span><span class='s2'>/</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='s2'>&quot;</span>
      <span class='k'>end</span>

      <span class='k'>def</span> <span class='nf'>checkout_root</span>
        <span class='s2'>&quot;/tmp&quot;</span>
      <span class='k'>end</span>

      <span class='k'>def</span> <span class='nf'>demo_production_version</span>
        <span class='sx'>%x{cat </span><span class='si'>#{</span><span class='n'>demo_git_checkout_path</span><span class='si'>}</span><span class='sx'>/version.txt}</span>
      <span class='k'>end</span>

      <span class='k'>def</span> <span class='nf'>demo_production_build</span>
        <span class='no'>Version</span><span class='o'>.</span><span class='n'>get_build</span><span class='p'>(</span><span class='n'>demo_production_version</span><span class='p'>)</span>
      <span class='k'>end</span>

      <span class='k'>def</span> <span class='nf'>demo_head_build</span>
        <span class='sx'>%x{git ls-remote </span><span class='si'>#{</span><span class='n'>demo_git_repo_url</span><span class='si'>}</span><span class='sx'> HEAD | cut -c1-7}</span><span class='o'>.</span><span class='n'>chomp</span>
      <span class='k'>end</span>

      <span class='k'>def</span> <span class='nf'>demo_production</span><span class='p'>(</span><span class='n'>options</span><span class='o'>=</span><span class='p'>{})</span>
        <span class='n'>old_build</span> <span class='o'>=</span> <span class='no'>Version</span><span class='o'>.</span><span class='n'>get_build</span><span class='p'>(</span><span class='n'>demo_production_version</span><span class='p'>)</span>

        <span class='n'>git_cmd</span> <span class='o'>=</span> <span class='n'>old_build</span> <span class='p'>?</span> <span class='ss'>:git_freshen_clone</span> <span class='p'>:</span> <span class='ss'>:github_clone</span>
        <span class='nb'>send</span><span class='p'>(</span><span class='n'>git_cmd</span><span class='p'>,</span> <span class='n'>stack</span><span class='p'>,</span> <span class='s2'>&quot;sh -c&quot;</span><span class='p'>)</span>

        <span class='n'>git_bump_version</span> <span class='n'>stack</span><span class='p'>,</span> <span class='s2'>&quot;&quot;</span>

        <span class='n'>build</span> <span class='o'>=</span> <span class='n'>demo_head_build</span>

        <span class='k'>begin</span>
          <span class='n'>run_cmd</span> <span class='sx'>%Q{echo &quot;ssh host do_something&quot;}</span>
          <span class='n'>log_and_stream</span> <span class='s2'>&quot;Done!&lt;br&gt;&quot;</span>
        <span class='k'>rescue</span>
          <span class='n'>log_and_stream</span> <span class='s2'>&quot;Failed!&lt;br&gt;&quot;</span>
        <span class='k'>end</span>

        <span class='c1'># log this deploy / timing</span>
        <span class='n'>log_and_shout</span><span class='p'>(</span><span class='ss'>:old_build</span> <span class='o'>=&gt;</span> <span class='n'>old_build</span><span class='p'>,</span> <span class='ss'>:build</span> <span class='o'>=&gt;</span> <span class='n'>build</span><span class='p'>,</span> <span class='ss'>:send_email</span> <span class='o'>=&gt;</span> <span class='kp'>true</span><span class='p'>)</span>
      <span class='k'>end</span>
    <span class='k'>end</span>
  <span class='k'>end</span>
<span class='k'>end</span>
</code></pre></div>
<p>The code that sets up the environments is in <code>helpers.rb</code>. The environments are defined by an array of hashes, this is what the code for the default environment looks like:</p>
<div class='highlight'><pre><code class='ruby'><span class='o'>[</span><span class='p'>{</span>
  <span class='ss'>:name</span>            <span class='o'>=&gt;</span> <span class='s2'>&quot;production&quot;</span><span class='p'>,</span>
  <span class='ss'>:title</span>           <span class='o'>=&gt;</span> <span class='s2'>&quot;Deploy </span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='s2'> production&quot;</span><span class='p'>,</span>
  <span class='ss'>:method</span>          <span class='o'>=&gt;</span> <span class='s2'>&quot;</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='s2'>_production&quot;</span><span class='p'>,</span>
  <span class='ss'>:current_version</span> <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:&quot;</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='ss'>_production_version&quot;</span><span class='p'>)},</span>
  <span class='ss'>:current_build</span>   <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='no'>Version</span><span class='o'>.</span><span class='n'>get_build</span><span class='p'>(</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:&quot;</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='ss'>_production_version&quot;</span><span class='p'>))},</span>
  <span class='ss'>:next_build</span>      <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:head_build</span><span class='p'>)}</span>
<span class='p'>}</span><span class='o'>]</span>
</code></pre></div>
<p>Once I found this code, and found the typo in my method name I was easily able to add more environments. To add environments to the demo stack that is provided all you have to do is define a <code>demo_environments</code> method in the stack file. Below is an example with a qa and production environment defined in a dynamic way.</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>def</span> <span class='nf'>demo_environment</span>
  <span class='o'>[</span><span class='p'>{</span>
    <span class='ss'>:name</span>            <span class='o'>=&gt;</span> <span class='s2'>&quot;qa&quot;</span><span class='p'>,</span>
    <span class='ss'>:title</span>           <span class='o'>=&gt;</span> <span class='s2'>&quot;Deploy </span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='s2'> qa&quot;</span><span class='p'>,</span>
    <span class='ss'>:method</span>          <span class='o'>=&gt;</span> <span class='s2'>&quot;</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='s2'>_qa&quot;</span><span class='p'>,</span>
    <span class='ss'>:current_version</span> <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:&quot;</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='ss'>_qa_version&quot;</span><span class='p'>)},</span>
    <span class='ss'>:current_build</span>   <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='no'>Version</span><span class='o'>.</span><span class='n'>get_build</span><span class='p'>(</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:&quot;</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='ss'>_qa_version&quot;</span><span class='p'>))},</span>
    <span class='ss'>:next_build</span>      <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:head_build</span><span class='p'>)}</span>
  <span class='p'>},</span>
  <span class='p'>{</span>
    <span class='ss'>:name</span>            <span class='o'>=&gt;</span> <span class='s2'>&quot;production&quot;</span><span class='p'>,</span>
    <span class='ss'>:title</span>           <span class='o'>=&gt;</span> <span class='s2'>&quot;Deploy </span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='s2'> production&quot;</span><span class='p'>,</span>
    <span class='ss'>:method</span>          <span class='o'>=&gt;</span> <span class='s2'>&quot;</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='s2'>_production&quot;</span><span class='p'>,</span>
    <span class='ss'>:current_version</span> <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:&quot;</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='ss'>_production_version&quot;</span><span class='p'>)},</span>
    <span class='ss'>:current_build</span>   <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='no'>Version</span><span class='o'>.</span><span class='n'>get_build</span><span class='p'>(</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:&quot;</span><span class='si'>#{</span><span class='n'>stack</span><span class='si'>}</span><span class='ss'>_production_version&quot;</span><span class='p'>))},</span>
    <span class='ss'>:next_build</span>      <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:head_build</span><span class='p'>)}</span>
  <span class='p'>}</span><span class='o'>]</span>
<span class='k'>end</span>
</code></pre></div>
<p>After adding this environment you will need to add a few additional methods ( <code>demo_qa</code> and <code>demo_qa_version</code> ). If you wanted you could also define the environments like so:</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>def</span> <span class='nf'>demo_environment</span>
  <span class='o'>[</span><span class='p'>{</span>
    <span class='ss'>:name</span>            <span class='o'>=&gt;</span> <span class='s2'>&quot;qa&quot;</span><span class='p'>,</span>
    <span class='ss'>:title</span>           <span class='o'>=&gt;</span> <span class='s2'>&quot;Deploy demo qa&quot;</span><span class='p'>,</span>
    <span class='ss'>:method</span>          <span class='o'>=&gt;</span> <span class='s2'>&quot;demo_qa&quot;</span><span class='p'>,</span>
    <span class='ss'>:current_version</span> <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:demo_qa_version</span><span class='p'>)},</span>
    <span class='ss'>:current_build</span>   <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='no'>Version</span><span class='o'>.</span><span class='n'>get_build</span><span class='p'>(</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:demo_qa_version</span><span class='p'>))},</span>
    <span class='ss'>:next_build</span>      <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:head_build</span><span class='p'>)}</span>
  <span class='p'>},</span>
  <span class='p'>{</span>
    <span class='ss'>:name</span>            <span class='o'>=&gt;</span> <span class='s2'>&quot;production&quot;</span><span class='p'>,</span>
    <span class='ss'>:title</span>           <span class='o'>=&gt;</span> <span class='s2'>&quot;Deploy demo production&quot;</span><span class='p'>,</span>
    <span class='ss'>:method</span>          <span class='o'>=&gt;</span> <span class='s2'>&quot;demo_production&quot;</span><span class='p'>,</span>
    <span class='ss'>:current_version</span> <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:demo_production_version</span><span class='p'>)},</span>
    <span class='ss'>:current_build</span>   <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='no'>Version</span><span class='o'>.</span><span class='n'>get_build</span><span class='p'>(</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:demo_production_version</span><span class='p'>))},</span>
    <span class='ss'>:next_build</span>      <span class='o'>=&gt;</span> <span class='nb'>proc</span><span class='p'>{</span><span class='nb'>send</span><span class='p'>(</span><span class='ss'>:head_build</span><span class='p'>)}</span>
  <span class='p'>}</span><span class='o'>]</span>
<span class='k'>end</span>
</code></pre></div>
<p>Here is what you end up with.</p>
<p><a class='th radius' href='http://www.jasonbutz.info/assets/img/posts/etsy-deployinator-01.png' style='display: inline-block;'>
	<img alt='Deployinator default enviroment' src='http://www.jasonbutz.info/assets/img/posts/etsy-deployinator-01.png' />
</a></p>
<p>So far this has been the biggest thing that wasn&#8217;t explained. Anything else I come across I&#8217;ll add here as well.</p>
     ]]></description>
   </item>
   
   <item>
    <title>New Site with Jekyll</title>
    <link>http://www.jasonbutz.info/blog/2013/07/24/new-site-with-jekyll.html</link>
    <dc:creator  xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Butz</dc:creator>
    <pubDate>Wed, 24 Jul 2013 15:00:00 -0400</pubDate>
    <guid>http://www.jasonbutz.info/blog/2013/07/24/new-site-with-jekyll.html</guid>
    <description><![CDATA[
     <p>The old version of my site was powered by laravel, and for what I used it for that was over-kill. I have tried out <a href='http://octopress.org'>Octopress</a> in the past and liked it, so I thought I would try the source and use <a href='http://jekyllrb.com'>Jekyll</a>. It quickly turned into my new site! Jekyll is very easy to learn and gives you an amazing amount of flexibility out of the box. Once you add on the plugins you can create there seems to be almost no limit.</p>

<p>I was initially only going to handle the projects that I post, since that is the biggest part of this site. Then I decided I wanted to add in the blog I had started. That work working well, but they I ran into some difficulty with having pagination on the blog, but not on the projects. Luckily, I was able to find a <a href='http://realjenius.com/2012/12/01/jekyll-category-tag-paging-feeds/'>blog post</a> that lead me down the path to a plugin that would work for my situation.</p>

<p><a href='http://jekyllrb.com'>Jekyll</a> seems to be amazing and I look forward to seeing what else I can do with it.</p>
     ]]></description>
   </item>
   
   <item>
    <title>Service Now</title>
    <link>http://www.jasonbutz.info/blog/2013/06/21/service-now.html</link>
    <dc:creator  xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Butz</dc:creator>
    <pubDate>Fri, 21 Jun 2013 16:03:00 -0400</pubDate>
    <guid>http://www.jasonbutz.info/blog/2013/06/21/service-now.html</guid>
    <description><![CDATA[
     <p>I recently switched jobs, and at the new company my department makes use of <a href='http://www.servicenow.com'>Service Now</a>. I must say, I am impressed with the product. It is sold as an ITIL compatible help desk solution, but it is so much more. You are able to customize nearly every aspect of the system if you wish. Want to rearrange a page? Done. Want a wizard so people enter their issues correctly? Done. All of this customization is done through their interface, which I expect you can customize, and through JavaScript scripts.</p>

<p>Their platform runs on Java and uses Mozilla&#8217;s rhino JavaScript engine for the server-side script processing. Everything is stored in a relational database, but you don&#8217;t really have direct access to it.</p>

<p>The system is very flexible, and it even has some build in functionality for web services. You can connect to their service using WSDL and SOAP or by using HTTP requests to get JSON, XML, CSV responses back. I think there may also be PDF responses? I&#8217;m not sure since I haven&#8217;t used them. Here is one of the big issues: I said you could use HTTP requests, but you don&#8217;t really get to make RESTful requests. You end up with these horrendous lists of parameters on your requests that can get very unruly.</p>

<p>There is one other big issue in my mind. Everything is done with JavaScript, which isn&#8217;t bad. However, their JavaScript does not look especially nice. It also doesn&#8217;t promote very good practices. Some things get put into functions, and then the functions are called. Others are just monolithic in nature and have no functions and are all &#8220;global&#8221;. I have been using a lot of IIFEs since I have no idea what the environment is like for my code, and I have no clue if the scripts are all thrown together, or if they are run individually.</p>

<p>That is really it for big issues. They have taken a lot of the annoying aspects out of making a web application. They take care of rendering for the most part, they have ACLs, they have logging, they have scheduled tasks. They even have decent documentation, which is always nice to find.</p>
     ]]></description>
   </item>
   
   <item>
    <title>Foundation instead of Bootstrap?</title>
    <link>http://www.jasonbutz.info/blog/2013/05/14/foundation-instead-of-bootstrap.html</link>
    <dc:creator  xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Butz</dc:creator>
    <pubDate>Tue, 14 May 2013 14:03:00 -0400</pubDate>
    <guid>http://www.jasonbutz.info/blog/2013/05/14/foundation-instead-of-bootstrap.html</guid>
    <description><![CDATA[
     <p>There seem to be an increasing number of people throwing rants about overuse of <a href='http://twitter.github.io/bootstrap/'>Twitter Bootstrap</a>. This is not one of them, I like Twitter Bootstrap. It is great for people who are not designers and need to put together something that looks decent. It makes putting together a site easy. That said, you can kind of tell when it is used. The buttons are usually a dead giveaway, and customizing it is not for the faint of heart.</p>

<p>For those reasons I decided to give something else a try for a <a href='http://www.bottlesapp.in'>project</a> I am putting together. I decided to give <a href='http://foundation.zurb.com'>Foundation</a> a try. It has a gem available, so it is designed to work nicely with Ruby on Rails, and it seems to be very flexible.</p>

<p>The documentation on the grid system requires you to read the whole thing, not just skim it and start going. One very nice thing about their grid system is that there are different classes for different size screens. It&#8217;s great for when you want space on either side of the screen on large screens, but want to lose the extra space on a smaller one. If you don&#8217;t understand what I mean take at the <a href='http://www.bottlesapp.in'>Bottles</a> coming soon page. Compare it between your computer and phone.</p>

<p>I haven&#8217;t had to do too much customizing to Foundation yet, but it looks like it is meant to handle that a bit better than Bootstrap.</p>
     ]]></description>
   </item>
   
   <item>
    <title>Bootstrap Lightbox Update</title>
    <link>http://www.jasonbutz.info/blog/2013/05/03/bootstrap-lightbox-update.html</link>
    <dc:creator  xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Butz</dc:creator>
    <pubDate>Fri, 03 May 2013 16:09:00 -0400</pubDate>
    <guid>http://www.jasonbutz.info/blog/2013/05/03/bootstrap-lightbox-update.html</guid>
    <description><![CDATA[
     <p>I took a bit of a break from working on <a href='https://github.com/jbutz/bootstrap-lightbox'>Bootstrap Lightbox</a>. I just needed to get away and be lazy for a while, but I am back. The other week I re-wrote the whole thing again. I&#8217;m sure that gets tiring for some, but I had several reasons:</p>
<ul class='no-bullet'>
<li>I wanted to do a little as necessary as Twitter updates Bootstrap</li>
<li>I wanted Bootstrap Lightbox to focus on images</li>
<li>I needed more JavaScript practice</li>
</ul>
<p>So, here is what is going on. The <a href='http://twitter.github.io/bootstrap/javascript.html#modals'>modal JavaScript</a> is now a dependency. I take its functions and extend them and only modify the ones for lightbox that need it. This reduced the amount of work required significantly. If people want to extend or tweak Bootstrap Lightbox to use with non-image content or with carousels then they are welcome to do so, but that isn&#8217;t what Bootstrap Lightbox is for. I&#8217;m focusing on images and that makes the code much easier to work with. This will make it a lot easier to add in some image gallery functionality. The old JavaScript was a mess, but now it is a lot cleaner and easier to understand.</p>

<p>So, what do I plan to do next? I am thinking about adding a feature so that you don&#8217;t need to add any extra HTML to your page. The feature would be optional, but it would provide a good basis to take care of image galleries.</p>

<p>The new version is still a work in progress, but I think I have it all working. It should be released soon.</p>
     ]]></description>
   </item>
   
   <item>
    <title>Ruby on Rails Exceptions</title>
    <link>http://www.jasonbutz.info/blog/2013/04/12/ruby-on-rails-exceptions.html</link>
    <dc:creator  xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Butz</dc:creator>
    <pubDate>Fri, 12 Apr 2013 16:45:00 -0400</pubDate>
    <guid>http://www.jasonbutz.info/blog/2013/04/12/ruby-on-rails-exceptions.html</guid>
    <description><![CDATA[
     <p>I&#8217;ve been learning Ruby and Ruby on Rails recently, and I was working on an application today that gave me some trouble in one particular area. The application is a simple application to allow IT to post the status of different systems so people can be aware of any issues. There are three models involved:</p>

<ul>
<li>Services</li>

<li>Statuses</li>

<li>Events</li>
</ul>

<p>An event references both a service and a status. I needed to be able to ensure a status being deleted wasn&#8217;t referenced by any events. The callback and the database query were easy, but I was having issues when it came to showing an error as to why the status wasn&#8217;t deleted. After a bit of Googling I found that exceptions seems to be the best way to do this. That was good to know, but I still had to figure out how to use them for this case. I had trouble finding any good example of an exception being used, so I figure I ought to post what I came up with.</p>

<p><em>status_controller.rb</em></p>
<div class='highlight'><pre><code class='ruby'><span class='k'>class</span> <span class='nc'>StatusesController</span> <span class='o'>&lt;</span> <span class='no'>ApplicationController</span>
<span class='o'>.</span><span class='n'>.</span><span class='o'>.</span>
  <span class='k'>def</span> <span class='nf'>destroy</span>
    <span class='vi'>@status</span> <span class='o'>=</span> <span class='no'>Status</span><span class='o'>.</span><span class='n'>find</span><span class='p'>(</span><span class='n'>params</span><span class='o'>[</span><span class='ss'>:id</span><span class='o'>]</span><span class='p'>)</span>
    <span class='k'>begin</span>
      <span class='vi'>@status</span><span class='o'>.</span><span class='n'>destroy</span>
    <span class='k'>rescue</span> <span class='no'>Exception</span> <span class='o'>=&gt;</span> <span class='n'>e</span>
      <span class='n'>flash</span><span class='o'>[</span><span class='ss'>:error</span><span class='o'>]</span> <span class='o'>=</span> <span class='n'>e</span><span class='o'>.</span><span class='n'>message</span>
      <span class='n'>redirect_to</span> <span class='n'>statuses_url</span>
      <span class='k'>return</span>
    <span class='k'>end</span>

    <span class='n'>respond_to</span> <span class='k'>do</span> <span class='o'>|</span><span class='nb'>format</span><span class='o'>|</span>
      <span class='nb'>format</span><span class='o'>.</span><span class='n'>html</span> <span class='p'>{</span> <span class='n'>redirect_to</span> <span class='n'>statuses_url</span> <span class='p'>}</span>
      <span class='nb'>format</span><span class='o'>.</span><span class='n'>json</span> <span class='p'>{</span> <span class='n'>head</span> <span class='ss'>:no_content</span> <span class='p'>}</span>
    <span class='k'>end</span>
  <span class='k'>end</span>
<span class='k'>end</span>
</code></pre></div>
<p><em>status.rb</em></p>
<div class='highlight'><pre><code class='ruby'><span class='k'>class</span> <span class='nc'>Status</span> <span class='o'>&lt;</span> <span class='no'>ActiveRecord</span><span class='o'>::</span><span class='no'>Base</span>
<span class='o'>.</span><span class='n'>.</span><span class='o'>.</span>
  <span class='n'>before_destroy</span> <span class='ss'>:check_existing_events</span>

  <span class='kp'>private</span>
<span class='o'>.</span><span class='n'>.</span><span class='o'>.</span>
  <span class='k'>def</span> <span class='nf'>check_existing_events</span>
    <span class='k'>raise</span> <span class='no'>Exception</span><span class='o'>.</span><span class='n'>new</span><span class='p'>(</span><span class='s2'>&quot;Events exist that use that status.&quot;</span><span class='p'>)</span> <span class='k'>unless</span> <span class='no'>Event</span><span class='o'>.</span><span class='n'>where</span><span class='p'>(</span><span class='ss'>:status_id</span> <span class='o'>=&gt;</span> <span class='nb'>self</span><span class='o'>.</span><span class='n'>id</span><span class='p'>)</span><span class='o'>.</span><span class='n'>count</span> <span class='o'>==</span> <span class='mi'>0</span>
  <span class='k'>end</span>
<span class='k'>end</span>
</code></pre></div>
     ]]></description>
   </item>
   
 </channel>
</rss>